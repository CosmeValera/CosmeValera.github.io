@mixin styled-button($color-font-and-border, $hover-background-color) {
    // ðŸ“± Mobile base styles (formerly "phone")
    font-size: 1rem;
    padding: 10px 8px;
    border: 2px solid $color-font-and-border;
    color: $color-font-and-border;
    background-color: $primary-bg;
    font-weight: normal;
    text-decoration: none;
  
    &:hover {
      color: $primary-bg;
      background-color: $hover-background-color;
    }
  
    // ðŸ§¾ TABLET styles (min-width: md)
    @include respond-to('md') {
      font-size: 1.6rem;
      padding: 12px 25px;
      border: 2px solid $color-font-and-border;
      font-weight: normal;
    }
  
    // ðŸ–¥ DESKTOP styles (min-width: lg)
    @include respond-to('lg') {
      font-size: 2rem;
      padding: 12px 30px;
      border: 3px solid $color-font-and-border;
      font-weight: bold;
    }
  }
  

@mixin underline-effect($after-position, $bottom, $hover-color) {
    position: relative;

    &::after {
        content: '';
        position: $after-position;
        width: 0;
        height: 1px;
        display: block;
        background: $text-color;
        transition: 0.25s;
        bottom: $bottom;
    }

    &:hover::after {
        width: 100%;
        background-color: $hover-color;
    }
}

@mixin card-a-colors-dark {
    background-color: $secondary-bg;
    border: 4px solid $accent-color;
}
@mixin card-b-colors-dark {
    background-color: $tertiary-bg;
    border: 1px solid $accent-color;
}

@mixin tag-styling {
    min-width: fit-content;

    &.tag-recommended {
        background: $recommended-gradient;
    }

    &.tag-for-beginners {
        background: $for-beginners-gradient;
    }

    &.tag-default {
        background: $default-tag-gradient;
    }
}

@mixin tag-styling-plain {
    min-width: fit-content;
    
    &.tag-recommended-plain {
        background-color: $recommended-plain;
    }

    &.tag-for-beginners-plain {
        background-color: $for-beginners-plain;
    }

    &.tag-default-plain {
        background-color: $default-tag-plain;
    }
}

// Breakpoints map for responsive mixins
$breakpoints: (
  'sm': $break-small,
  'md': $break-medium,
  'lg': $break-large,
  'xl': $break-extra-large
);

// Mixin for min-width breakpoints
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' not found in \$breakpoints map.";
  }
}